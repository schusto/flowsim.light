name: Apply diff from comment

on:
  issue_comment:
    types: [created, edited]

permissions:
  contents: write
  pull-requests: write
  issues: read

jobs:
  apply-patch:
    if: |
      contains(github.event.comment.body, '/apply') &&
      (github.event.issue.pull_request != null || github.event.issue != null)
    runs-on: ubuntu-latest

    steps:
      - name: Figure out target ref (PR or default branch)
        id: target
        run: |
          if [[ -n "${{ github.event.issue.pull_request.url }}" ]]; then
            echo "mode=pr" >> $GITHUB_OUTPUT
            # Get the PR head ref via the REST API to checkout the correct branch
            curl -sSL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "${{ github.event.issue.pull_request.url }}" > pr.json
            head_ref=$(jq -r '.head.ref' pr.json)
            echo "ref=$head_ref" >> $GITHUB_OUTPUT
          else
            # Issue comment: use default branch
            echo "mode=issue" >> $GITHUB_OUTPUT
            echo "ref=${{ github.ref_name }}" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.target.outputs.ref }}
          fetch-depth: 0

      - name: Extract first fenced diff or patch block
        id: extract
        shell: bash
        run: |
          body=$(jq -r '.comment.body' <<< '${{ toJson(github.event) }}')
          # Extract the first fenced block starting with ```diff or ```patch (GitHub fenced code blocks). 
          # This leverages standard Markdown fencing documented by GitHub.
          start_line=$(awk '/^```(diff|patch)/ {print NR; exit}' <<< "$body")
          if [[ -z "$start_line" ]]; then
            echo "No fenced diff/patch block found." >&2
            exit 1
          fi
          tail_from_start=$(tail -n +$((start_line+1)) <<< "$body")
          end_line=$(awk '/^```/ {print NR; exit}' <<< "$tail_from_start")
          if [[ -z "$end_line" ]]; then
            echo "Unclosed fenced code block." >&2
            exit 1
          fi
          patch_content=$(head -n $((end_line-1)) <<< "$tail_from_start")
          printf "%s\n" "$patch_content" > patch.diff
          echo "patch=patch.diff" >> $GITHUB_OUTPUT
          echo "---- PATCH BEGIN ----"
          sed -n '1,120p' patch.diff || true
          echo "---- PATCH END ----"

      - name: Apply patch (git apply)
        shell: bash
        run: |
          # Fail fast with clear error if paths donâ€™t match repo layout.
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          # Try standard safety first; if your diffs use -U0, add --unidiff-zero.
          git apply --index "${{ steps.extract.outputs.patch }}" || {
            echo "git apply failed. Ensure the diff paths are relative to repo root and in unified diff format." >&2
            exit 1
          }
          git status --porcelain

      - name: Create PR with applied patch
        uses: peter-evans/create-pull-request@v7
        with:
          branch: "bot/apply-${{ github.run_id }}"
          commit-message: "chore: apply patch from comment #${{ github.event.issue.number }}"
          title: "Apply patch from comment #${{ github.event.issue.number }}"
          body: "Applied patch posted in ${{ github.event.comment.html_url }}"
          labels: "automated, bot"
          delete-branch: true
